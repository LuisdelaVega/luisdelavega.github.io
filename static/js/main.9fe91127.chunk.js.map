{"version":3,"sources":["Pokecard.js","Pokedex.js","Pokegame.js","App.js","serviceWorker.js","index.js"],"names":["Pokecard","this","props","getUrl","pokemon","id","name","type","base_experience","Flex","className","direction","align","Box","mt","fontWeight","as","lineHeight","isTruncated","Image","src","alt","Component","defaultProps","index","padStart","Pokedex","isWinner","color","textAlign","Grid","templateColumns","gap","style","padding","map","pkmn","key","Pokegame","pokedex1","pokedex2","i","length","randomIndex","Math","floor","random","push","splice","calculateTotalBaseExperience","acucmulator","currentValue","pokedex1EXP","reduce","pokedex2EXP","App","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9fe91127.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Box, Image, Flex } from '@chakra-ui/core'\r\nimport './Pokecard.scss'\r\n\r\nclass Pokecard extends Component {\r\n  static defaultProps = {\r\n    getUrl: index => `https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${('' + index).padStart(3, '0')}.png`\r\n  }\r\n\r\n  render() {\r\n    const { getUrl, pokemon } = this.props\r\n    const { id, name, type, base_experience } = pokemon\r\n\r\n    return (\r\n      <Flex className='Pokecard' direction='column' align='center'>\r\n        <Box\r\n          mt='1'\r\n          fontWeight='bold'\r\n          as='h2'\r\n          lineHeight='tight'\r\n          isTruncated\r\n        >\r\n          {name}\r\n        </Box>\r\n\r\n        <Box className='Pokecard-img' >\r\n          <Image src={getUrl(id)} alt={name} />\r\n        </Box>\r\n\r\n        <Box>\r\n          Type: {type}\r\n        </Box>\r\n        \r\n        <Box>\r\n          Experience: {base_experience}\r\n        </Box>\r\n      </Flex>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Pokecard","import React, { Component } from 'react'\r\nimport { Grid, Box } from \"@chakra-ui/core\"\r\n\r\n/**\r\n * Components\r\n */\r\nimport Pokecard from './Pokecard'\r\n\r\nclass Pokedex extends Component {\r\n  render() {\r\n    const { pokemon, isWinner } = this.props\r\n\r\n    return (\r\n      <>\r\n        <Box\r\n          mt='1'\r\n          fontWeight='bold'\r\n          as='h2'\r\n          lineHeight='tight'\r\n          isTruncated\r\n          color={isWinner ? 'rgba(88, 129, 87)' : 'rgba(237, 37, 78)'}\r\n          textAlign='center'\r\n        >\r\n          {isWinner ? 'This hand wins!' : 'This hand loses'}\r\n        </Box>\r\n        <Grid\r\n          templateColumns=\"repeat(4, 1fr)\"\r\n          gap={6}\r\n          style={{ padding: '15px' }}\r\n        >\r\n          {\r\n            pokemon.map(pkmn => <Pokecard key={pkmn.id} pokemon={pkmn} />)\r\n          }\r\n        </Grid>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Pokedex","import React, { Component } from 'react'\nimport { Flex } from '@chakra-ui/core'\nimport Pokedex from './Pokedex'\n\nclass Pokegame extends Component {\n  static defaultProps = {\n    pokemon: [\n      { id: 4, name: 'Charmander', type: 'fire', base_experience: 62 },\n      { id: 7, name: 'Squirtle', type: 'water', base_experience: 63 },\n      { id: 11, name: 'Metapod', type: 'bug', base_experience: 72 },\n      { id: 12, name: 'Butterfree', type: 'flying', base_experience: 178 },\n      { id: 25, name: 'Pikachu', type: 'electric', base_experience: 112 },\n      { id: 39, name: 'Jigglypuff', type: 'normal', base_experience: 95 },\n      { id: 94, name: 'Gengar', type: 'poison', base_experience: 225 },\n      { id: 133, name: 'Eevee', type: 'normal', base_experience: 65 }\n    ]\n  }\n\n  render() {\n    const { pokemon } = this.props\n    const pokedex1 = [...pokemon] //pokemon.slice(0)\n    const pokedex2 = []\n\n    for (let i = 0; i < pokemon.length / 2; i++) {\n      const randomIndex = Math.floor(Math.random() * pokedex1.length)\n      pokedex2.push(pokedex1.splice(randomIndex, 1)[0])\n    }\n\n    const calculateTotalBaseExperience = (acucmulator, currentValue) => {\n      acucmulator += currentValue.base_experience\n      return acucmulator\n    }\n\n    const pokedex1EXP = pokedex1.reduce(calculateTotalBaseExperience, 0)\n    const pokedex2EXP = pokedex2.reduce(calculateTotalBaseExperience, 0)\n\n    return (\n      <Flex direction='column' >\n        <Pokedex pokemon={pokedex1} isWinner={pokedex1EXP > pokedex2EXP} />\n        <Pokedex pokemon={pokedex2} isWinner={pokedex2EXP > pokedex1EXP} />\n      </Flex>\n    )\n  }\n}\n\nexport default Pokegame","import React from 'react'\nimport { ThemeProvider } from \"@chakra-ui/core\"\n\n/**\n * Components\n */\nimport Pokegame from './Pokegame'\n\nfunction App() {\n  return (\n    <ThemeProvider>\n      <Pokegame />\n    </ThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}